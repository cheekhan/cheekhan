<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>图结构自动布局算法-01-graphlib使用</title>
    <link href="/cheekhan/2023/08/30/%E5%9B%BE%E7%BB%93%E6%9E%84%E8%87%AA%E5%8A%A8%E5%B8%83%E5%B1%80%E7%AE%97%E6%B3%95-01-graphlib%E4%BD%BF%E7%94%A8/"/>
    <url>/cheekhan/2023/08/30/%E5%9B%BE%E7%BB%93%E6%9E%84%E8%87%AA%E5%8A%A8%E5%B8%83%E5%B1%80%E7%AE%97%E6%B3%95-01-graphlib%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="一、graphlib"><a href="#一、graphlib" class="headerlink" title="一、graphlib"></a>一、graphlib</h1><blockquote><p><a href="https://juejin.cn/post/7079732431116304397#heading-44">https://juejin.cn/post/7079732431116304397#heading-44</a></p></blockquote><p>导出内容：</p><ul><li><code>Graph</code> : Graph类，提供了图的各种操作方法</li><li><code>json</code> : 工具函数，用于图转为json，或者由json格式化一个图</li><li><code>alg</code> : 图的各种算法实现</li></ul><h2 id="1、Graph类"><a href="#1、Graph类" class="headerlink" title="1、Graph类"></a>1、<code>Graph</code>类</h2><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ts">directed?: <span class="hljs-built_in">boolean</span>; <span class="hljs-comment">// default: true. 是否为有向图</span><br>multigraph?: <span class="hljs-built_in">boolean</span>; <span class="hljs-comment">// default: false.两节点之间，是否允许多个边</span><br>compound?: <span class="hljs-built_in">boolean</span>; <span class="hljs-comment">// default: false.图是否允许复合点</span><br></code></pre></td></tr></table></figure><h3 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h3><p><code>graph.setGraph(value)</code>:</p><blockquote><p>设置整个graph的值，一些graph的参数，如宽高等，一般是设置一个空对象</p></blockquote><p><code>graph.graph()</code>:</p><blockquote><p>获取graph的值</p></blockquote><p><code>graph.setNode(node_id,[value])</code>:</p><blockquote><p>在图中创建或更新节点的值，</p></blockquote><p><code>graph.removeNode(node_id)</code>:</p><blockquote><p>移除某个节点，同时会移除这个节点的边</p></blockquote><p><code>graph.setEdge(node_id1,node_id2,label,[name])</code>:</p><blockquote><p>给两个节点设置或更新边信息</p></blockquote><p><code>graph.removeEdge(node_id1,node_id2)</code>:</p><blockquote><p>移除两个节点的边</p></blockquote><p><code>graph.setDefaultNodeLabel(obj)</code>:</p><blockquote><p>设置一个默认的节点value,可以是一个函数(node)&#x3D;&gt;obj</p></blockquote><p><code>graph.setDefaultEdgeLabel(obj)</code>:</p><blockquote><p>给边设置一个默认的节点</p></blockquote><p><code>graph.nodes()</code>:</p><blockquote><p>获取所有的节点，返回节点id的列表</p></blockquote><p><code>graph.node(id)</code>:</p><blockquote><p>根据id，查询节点信息</p></blockquote><p><code>graph.edges()</code>:</p><blockquote><p>获取所有的边，返回边列表</p></blockquote><p><code>graph.edge(source_id,target_id)</code>:</p><blockquote><p>根据起始的节点id，查询一条边</p></blockquote><p><code>graph.sources()</code>:</p><blockquote><p>返回没有入边的节点</p></blockquote><p><code>graph.sinks()</code>:</p><blockquote><p>返回所有没有出边的节点</p></blockquote><p><code>graph.predecessors(node_id)</code>:</p><blockquote><p>返回当前节点的所有的祖先节点</p></blockquote><p><code>graph.parent(node_id)</code>:</p><blockquote><p>返回当前节点的父节点（TODO: 和predecessors区别是什么）</p></blockquote><p><code>graph.successors(node_id)</code>:</p><blockquote><p>返回当前节点的所有后序节点</p></blockquote><p><code>graph.children(node_id)</code>:</p><blockquote><p>返回当前节点的所有子节点</p></blockquote><p><code>graph.inEdges(node_id)</code>:</p><blockquote><p>查询某个节点的所有入边</p></blockquote><p><code>graph.outEdges(node_id)</code>:</p><blockquote><p>查询某个节点的所有出边</p></blockquote><p><code>graph.nodeEdges(node_id)</code>:</p><blockquote><p>查询某个节点，所有的边，包括入边和出边</p></blockquote><h2 id="2、alg算法工具类"><a href="#2、alg算法工具类" class="headerlink" title="2、alg算法工具类"></a>2、<code>alg</code>算法工具类</h2><h2 id="3、json转换工具"><a href="#3、json转换工具" class="headerlink" title="3、json转换工具"></a>3、<code>json</code>转换工具</h2><p><code>json.write(graph)</code>:</p><blockquote><p>根据图，生成一个json，json包括了options、nodes、edges</p></blockquote><p><code>json.read(json)</code>:</p><blockquote><p>根据一段json结构，生成一个graph</p></blockquote><h1 id="二、dagre"><a href="#二、dagre" class="headerlink" title="二、dagre"></a>二、dagre</h1><blockquote><p><a href="https://github.com/dagrejs/dagre/wiki">https://github.com/dagrejs/dagre/wiki</a></p></blockquote><h2 id="layout方法"><a href="#layout方法" class="headerlink" title="layout方法"></a><code>layout</code>方法</h2><p><code>layout(graph,config)=&gt;</code>:</p><p>生成绘制树，config参数说明如下：</p><table><thead><tr><th>值</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>rankdir</td><td>TB</td><td>排列节点的方向，T是上，B是下，L是左，R是右</td></tr><tr><td>align</td><td>undefined</td><td>排列节点的对齐方式，U&#x3D;上，D&#x3D;下，L&#x3D;左，R&#x3D;右</td></tr><tr><td>nodesep</td><td>50</td><td>节点的水平间距</td></tr><tr><td>edgesep</td><td>10</td><td>线的水平间距</td></tr><tr><td>ranksep</td><td>50</td><td>排列间距，就是层间距</td></tr><tr><td>marginx</td><td>0</td><td>图的左右间距</td></tr><tr><td>marginy</td><td>0</td><td>图上下间距</td></tr><tr><td>acyclicer</td><td>undefined</td><td>环模式，如果设置为<code>greedy</code>，则会返回可移除的边列表，使图无环</td></tr><tr><td>ranker</td><td><code>network-simplex</code></td><td>使用哪种布局算法，默认是<code>network-simplex</code>，可选的还有<code>tight-tree</code>,<code>longest-path</code></td></tr><tr><td>width</td><td>0</td><td>节点宽度</td></tr><tr><td>height</td><td>0</td><td>节点高度</td></tr><tr><td>minlen</td><td>1</td><td>线的最小长度</td></tr><tr><td>weight</td><td>1</td><td>线的权重，权重越高，线越短直</td></tr><tr><td>width</td><td>0</td><td>线的label的宽度</td></tr><tr><td>height</td><td>0</td><td>线的label的高度</td></tr><tr><td>labelpos</td><td><code>r</code></td><td>线的label的位置，l&#x3D;左，c&#x3D;中间，r&#x3D;右侧</td></tr><tr><td>labeloffset</td><td>10</td><td>label和边的距离，当label的定位是<code>l</code>和<code>r</code>时生效</td></tr></tbody></table><p>生成布局图的一些属性</p><table><thead><tr><th>范围</th><th>值</th><th>说明</th></tr></thead><tbody><tr><td>graph</td><td>height</td><td>图的高度</td></tr><tr><td>graph</td><td>width</td><td>图的宽度</td></tr><tr><td>node，edge</td><td>x，y</td><td>节点的中心坐标，或者线的中心坐标</td></tr><tr><td>edge</td><td>points</td><td>{x，y}构成的线的控制点</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>可视化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>图结构自动布局</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
